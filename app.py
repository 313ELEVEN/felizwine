# –ù–û–í–û–ï: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import requests
from flask import Flask, render_template, request, jsonify, session, redirect, url_for, send_from_directory
import sqlite3
from functools import wraps
import logging
import json
from collections import defaultdict
from flask_cors import CORS

#
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø—É—Ç—è–º–∏

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ CORS-–∑–∞–ø—Ä–æ—Å—ã
app.secret_key = 'your_secret_key_here'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024

logging.basicConfig(level=logging.DEBUG)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Telegram-–±–æ—Ç–∞
BOT_TOKEN = '7075151658:AAH9MK6jyguU3BA5J8yK5ZDy5rMYba_9Hgg'
<<<<<<< HEAD
CHAT_IDS = ['310936025', '7255973106', '6113861296']  # –°–ø–∏—Å–æ–∫ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
=======
CHAT_IDS = ['310936025', '7255973106']  # –°–ø–∏—Å–æ–∫ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
>>>>>>> 9a27d76b2adfe60b2a734a259eb369be2297667a

# –ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
CATEGORY_ORDER = [
    "–ó–∞–≤—Ç—Ä–∞–∫ / Breakfast", "–°—É–ø—ã / Soups", "–ó–∞–∫—É—Å–∫–∏ / Appetizers",
    "–°–∞–ª–∞—Ç—ã / Salads", "–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã –∏ –†—ã–±–∞ / Seafood and Fish",
    "–ü–∞—Å—Ç–∞ / Pasta", "–ú—è—Å–Ω—ã–µ –±–ª—é–¥–∞ / Meat Dishes",
    "–ë—É—Ä–≥–µ—Ä—ã –∏ –¥—Ä—É–≥–æ–µ / Burgers & More", "–î–µ—Å–µ—Ä—Ç—ã / Desserts",
    "–ö–æ—Ñ–µ / Coffee", "–ß–∞–π / Tea", "–ù–∞–ø–∏—Ç–∫–∏ / Drinks",
    "–ë–µ–ª–æ–µ –≤–∏–Ω–æ / White Wines", "–ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ / Red Wines",
    "–†–æ–∑–æ–≤–æ–µ –≤–∏–Ω–æ / Rose Wines", "–ò–≥—Ä–∏—Å—Ç—ã–µ –≤–∏–Ω–∞ / Sparkling Wines",
    "–ö–æ–∫—Ç–µ–π–ª–∏ / Cocktails", "–ü–∏–≤–æ –∏ –∑–∞–∫—É—Å–∫–∏ / Beer & Snacks"
]

def get_db_connection():
    conn = sqlite3.connect('feliz_wine_bar.db')
    conn.row_factory = sqlite3.Row
    return conn

def send_telegram_notification(order_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ Telegram –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        total_price = sum(float(item['price']) * int(item.get('quantity', 1)) for item in order_data.get('cart', []))
        
        message = (
            f"üéâ *Comanda noua! #{order_data.get('order_id')}* üéâ\n\n"
            f"üë§ *Numele clientului:* {order_data.get('name')}\n"
            f"üìû *Numar mobil:* {order_data.get('phone')}\n"
            f"üìç *Adresa livrarii:* {order_data.get('address')}\n\n"
            f"üõí *Comanda de:*\n"
        )
        for item in order_data.get('cart', []):
            item_total = float(item.get('price', 0)) * int(item.get('quantity', 1))
            message += f"- {item.get('name')} x {item.get('quantity')} = {item_total:.2f} MDL\n"
        
        message += f"\nüí∞ *Pret total:* *{total_price:.2f} MDL*"
        
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–ø–∏—Å–∫–µ CHAT_IDS
        for chat_id in CHAT_IDS:
            params = {"chat_id": chat_id, "text": message, "parse_mode": "Markdown"}
            response = requests.post(url, data=params, timeout=5)
            if response.status_code == 200:
                app.logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_data.get('order_id')} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (chat_id: {chat_id}).")
            else:
                app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (chat_id: {chat_id}): {response.text}")
    except Exception as e:
        app.logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not session.get('is_admin'):
            app.logger.warning('Unauthorized access attempt to admin page.')
            return redirect(url_for('menu'))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
def home():
    user_info = None
    if 'user_id' in session:
        conn = get_db_connection()
        user_info = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()
        conn.close()
    return render_template('index.html', user_info=user_info)

@app.route('/menu')
def menu():
    user_info = None
    if 'user_id' in session:
        conn = get_db_connection()
        user_info = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()
        conn.close()
    return render_template('menu.html', user_info=user_info)

@app.route('/profile')
def profile():
    if 'user_id' not in session:
        return redirect(url_for('menu'))
    conn = get_db_connection()
    user_info = conn.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()
    orders_raw = conn.execute('SELECT * FROM orders WHERE user_id = ? ORDER BY id DESC', (session['user_id'],)).fetchall()
    conn.close()
    orders = [dict(o) for o in orders_raw]
    for order in orders:
        order['order_details'] = json.loads(order['order_details'])
    return render_template('profile.html', user_info=dict(user_info), orders=orders)

@app.route('/api/get_menu')
def get_menu():
    try:
        is_food = request.args.get('is_food', '1') == '1'

        food_categories = [
            "–ó–∞–≤—Ç—Ä–∞–∫ / Breakfast", "–°—É–ø—ã / Soups", "–ó–∞–∫—É—Å–∫–∏ / Appetizers",
            "–°–∞–ª–∞—Ç—ã / Salads", "–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã –∏ –†—ã–±–∞ / Seafood and Fish",
            "–ü–∞—Å—Ç–∞ / Pasta", "–ú—è—Å–Ω—ã–µ –±–ª—é–¥–∞ / Meat Dishes",
            "–ë—É—Ä–≥–µ—Ä—ã –∏ –¥—Ä—É–≥–æ–µ / Burgers & More", "–î–µ—Å–µ—Ä—Ç—ã / Desserts"
                                ]
        drink_categories = [
            "–ö–æ—Ñ–µ / Coffee",
            "–ß–∞–π / Tea",
            "–°–æ–∫–∏ –∏ –í–æ–¥–∞ / Juices & Water",
            "–ü–∏–≤–æ –∏ –∑–∞–∫—É—Å–∫–∏ / Beer & Snacks",
            "–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ / Non-alcoholic cocktails",
            "–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏ / Alcoholic cocktails",
            "–í–∏—Å–∫–∏ / Whisky",
            "–ö–æ–Ω—å—è–∫ / Divin",
            "–ò–≥—Ä–∏—Å—Ç—ã–µ / Sparkling",
            "–ë–µ–ª—ã–µ –≤–∏–Ω–∞ / White Wines",
            "–†–æ–∑–æ–≤—ã–µ –≤–∏–Ω–∞ / Ros√© Wines",
            "–ö—Ä–∞—Å–Ω—ã–µ –≤–∏–Ω–∞ / Red Wines"
        ]

        target_categories = food_categories if is_food else drink_categories
        
        placeholders = ', '.join(['?'] * len(target_categories))
        conn = get_db_connection()
        
        query = f'''
            SELECT * FROM menu_items 
            WHERE category IN ({placeholders}) 
            ORDER BY 
                CASE category {' '.join([f"WHEN '{cat}' THEN {i}" for i, cat in enumerate(target_categories)])} END,
                name
        '''
        
        items = conn.execute(query, target_categories).fetchall()
        conn.close()

        menu_by_category = defaultdict(list)
        for item in items:
            menu_by_category[item['category']].append(dict(item))

        sorted_menu = []
        for cat in target_categories:
            if cat in menu_by_category:
                sorted_menu.append({
                    'category': cat,
                    'items': menu_by_category[cat]
                })

        return jsonify(sorted_menu)
    except Exception as e:
        app.logger.error(f"Get menu error: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/login', methods=['POST'])
def login():
    try:
        data = request.get_json()
        conn = get_db_connection()
        user = conn.execute('SELECT * FROM users WHERE email = ? AND password = ?', (data.get('email'), data.get('password'))).fetchone()
        conn.close()
        if user:
            session['user_id'] = user['id']
            session['is_admin'] = bool(user['is_admin'])
            return jsonify({'success': True})
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.'})
    except Exception as e:
        app.logger.error(f"Login error: {e}")
        return jsonify({'success': False, 'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.'}), 500

@app.route('/api/register', methods=['POST'])
def register():
    try:
        data = request.get_json()
        name, email, phone, password = data.get('name'), data.get('email'), data.get('phone'), data.get('password')
        if not all([name, email, phone, password]):
            return jsonify({'success': False, 'message': '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.'}), 400
        conn = get_db_connection()
        conn.execute('INSERT INTO users (name, email, phone, password) VALUES (?, ?, ?, ?)', (name, email, phone, password))
        conn.commit()
        user = conn.execute('SELECT * FROM users WHERE email = ?', (email,)).fetchone()
        session['user_id'] = user['id']
        session['is_admin'] = bool(user['is_admin'])
        conn.close()
        return jsonify({'success': True, 'message': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'})
    except sqlite3.IntegrityError:
        return jsonify({'success': False, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'}), 409
    except Exception as e:
        app.logger.error(f"Registration error: {e}")
        return jsonify({'success': False, 'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.'}), 500

@app.route('/api/logout', methods=['POST'])
def logout():
    session.clear()
    return jsonify({'success': True})

@app.route('/api/place_order', methods=['POST'])
def place_order():
    try:
        data = request.get_json()
        user_id = session.get('user_id')
        name, phone, address, cart = data.get('name'), data.get('phone'), data.get('address'), data.get('cart', [])
        if not all([name, phone, address, cart]):
            return jsonify({'success': False, 'message': '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.'}), 400
        
        order_details_json = json.dumps(cart, ensure_ascii=False)
        total_price = sum(float(item['price']) * int(item.get('quantity', 1)) for item in cart)
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('INSERT INTO orders (user_id, customer_name, customer_phone, customer_address, order_details, total_price) VALUES (?, ?, ?, ?, ?, ?)',
                     (user_id, name, phone, address, order_details_json, total_price))
        
        order_id = cursor.lastrowid # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        conn.commit()
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        try:
            order_data_for_telegram = {**data, "order_id": order_id}
            send_telegram_notification(order_data_for_telegram)
        except Exception as e:
            # –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ª–æ–º–∞—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑. –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –µ–µ.
            app.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")

        conn.close()
        return jsonify({'success': True, 'message': '–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!'})
    except Exception as e:
        app.logger.error(f"Place order error: {e}")
        return jsonify({'success': False, 'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.'}), 500

# Admin routes
@app.route('/admin/dashboard')
@admin_required
def admin_dashboard():
    conn = get_db_connection()
    orders_raw = conn.execute('SELECT o.*, u.email as user_email FROM orders o LEFT JOIN users u ON o.user_id = u.id ORDER BY o.id DESC').fetchall()
    categories = [row['category'] for row in conn.execute('SELECT DISTINCT category FROM menu_items').fetchall()]
    menu_items = [dict(item) for item in conn.execute('SELECT * FROM menu_items ORDER BY category, name').fetchall()]
    conn.close()
    orders = [dict(row) for row in orders_raw]
    for order in orders:
        order['order_details'] = json.loads(order['order_details'])
    return render_template('admin_dashboard.html', orders=orders, categories=categories, menu_items=menu_items)

@app.route('/admin/update_status/<int:order_id>', methods=['POST'])
@admin_required
def update_order_status(order_id):
    try:
        new_status = request.json.get('status')
        if not new_status: return jsonify({'success': False, 'message': '–°—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
        conn = get_db_connection()
        conn.execute('UPDATE orders SET status = ? WHERE id = ?', (new_status, order_id))
        conn.commit()
        conn.close()
        return jsonify({'success': True})
    except Exception as e:
        app.logger.error(f"Update status error for order {order_id}: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/admin/delete_order/<int:order_id>', methods=['POST'])
@admin_required
def delete_order(order_id):
    try:
        conn = get_db_connection()
        conn.execute('DELETE FROM orders WHERE id = ?', (order_id,))
        conn.commit()
        conn.close()
        return jsonify({'success': True})
    except Exception as e:
        app.logger.error(f"Delete order error for order {order_id}: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/admin/get_menu_item/<int:item_id>')
@admin_required
def get_menu_item(item_id):
    try:
        conn = get_db_connection()
        item = conn.execute('SELECT * FROM menu_items WHERE id = ?', (item_id,)).fetchone()
        conn.close()
        if item:
            return jsonify({
                'success': True,
                'item': dict(item)
            })
        return jsonify({'success': False, 'message': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    except Exception as e:
        app.logger.error(f"Get menu item error: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/admin/add_menu_item', methods=['POST'])
@admin_required
def add_menu_item():
    try:
        data = request.get_json()
        name = data.get('name')
        description = data.get('description')
        price = float(data.get('price'))
        category = data.get('category') or data.get('new_category')
        image_url = data.get('image_url')
        is_food = int(data.get('is_food', 1))
        
        if not all([name, price, category]):
            return jsonify({'success': False, 'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é'}), 400
            
        conn = get_db_connection()
        conn.execute('''INSERT INTO menu_items 
                      (name, description, price, category, image_url, is_food) 
                      VALUES (?, ?, ?, ?, ?, ?)''',
                     (name, description, price, category, image_url, is_food))
        conn.commit()
        conn.close()
        return jsonify({'success': True})
    except Exception as e:
        app.logger.error(f"Add menu item error: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/admin/edit_menu_item/<int:item_id>', methods=['POST'])
@admin_required
def edit_menu_item(item_id):
    try:
        data = request.get_json()
        name = data.get('name')
        description = data.get('description')
        price = float(data.get('price'))
        category = data.get('category') or data.get('new_category')
        image_url = data.get('image_url')
        is_food = int(data.get('is_food', 1))
        
        if not all([name, price, category]):
            return jsonify({'success': False, 'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é'}), 400
            
        conn = get_db_connection()
        conn.execute('''UPDATE menu_items 
                      SET name = ?, description = ?, price = ?, category = ?, image_url = ?, is_food = ?
                      WHERE id = ?''',
                     (name, description, price, category, image_url, is_food, item_id))
        conn.commit()
        conn.close()
        return jsonify({'success': True})
    except Exception as e:
        app.logger.error(f"Edit menu item error: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/admin/delete_menu_item/<int:item_id>', methods=['POST'])
@admin_required
def delete_menu_item(item_id):
    try:
        conn = get_db_connection()
        conn.execute('DELETE FROM menu_items WHERE id = ?', (item_id,))
        conn.commit()
        conn.close()
        return jsonify({'success': True})
    except Exception as e:
        app.logger.error(f"Delete menu item error: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/admin/delete_category', methods=['POST'])
@admin_required
def delete_category():
    try:
        data = request.get_json()
        category = data.get('category')
        if not category:
            return jsonify({'success': False, 'message': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}), 400
            
        conn = get_db_connection()
        conn.execute('UPDATE menu_items SET category = ? WHERE category = ?', 
                   ('–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', category))
        conn.commit()
        conn.close()
        return jsonify({'success': True})
    except Exception as e:
        app.logger.error(f"Delete category error: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/admin/update_category_order', methods=['POST'])
@admin_required
def update_category_order():
    try:
        new_order = request.json.get('order')
        if not new_order:
            return jsonify({'success': False, 'message': '–ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
            
        return jsonify({'success': True, 'message': '–ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω'})
    except Exception as e:
        app.logger.error(f"Update category order error: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/admin/update_item_order', methods=['POST'])
@admin_required
def update_item_order():
    try:
        data = request.json
        item_id = data.get('item_id')
        new_category = data.get('category')
        new_position = data.get('position')
        
        if not all([item_id, new_category, new_position is not None]):
            return jsonify({'success': False, 'message': '–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã'}), 400
            
        conn = get_db_connection()
        conn.execute('UPDATE menu_items SET category = ? WHERE id = ?', 
                   (new_category, item_id))
        conn.commit()
        conn.close()
        
        return jsonify({'success': True})
    except Exception as e:
        app.logger.error(f"Update item order error: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/static/<path:filename>')
def static_files(filename):
    return send_from_directory('static', filename)

if __name__ == '__main__':
    app.run(host='0.0.0.0', debug=True)