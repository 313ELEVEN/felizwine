import sqlite3
import requests
from flask import Flask, request, jsonify, render_template

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç Telegram
BOT_TOKEN = '7075151658:AAH9MK6jyguU3BA5J8yK5ZDy5rMYba_9Hgg'
CHAT_ID = '2116037251'
# -----------------

app = Flask(__name__, static_url_path='/static')
DATABASE = 'feliz_wine_bar.db'

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü) ---
def init_db():
    with app.app_context():
        conn = get_db_connection()
        cursor = conn.cursor()
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                customer_name TEXT NOT NULL,
                customer_phone TEXT NOT NULL,
                customer_address TEXT NOT NULL,
                total_price REAL NOT NULL,
                status TEXT NOT NULL DEFAULT '–ù–æ–≤—ã–π',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS order_items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER NOT NULL,
                name TEXT NOT NULL,
                quantity INTEGER NOT NULL,
                price REAL NOT NULL,
                FOREIGN KEY (order_id) REFERENCES orders (id)
            )
        ''')
        # ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–µ–Ω—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç.–¥.
        conn.commit()
        conn.close()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# --- –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í TELEGRAM ---
def send_telegram_notification(order_data):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏ ID –∑–∞–¥–∞–Ω—ã
    if BOT_TOKEN == '–í–ê–®_–¢–û–ö–ï–ù_–û–¢_BOTFATHER' or CHAT_ID == '–í–ê–®_–õ–ò–ß–ù–´–ô_CHAT_ID':
        print("!!! –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–∫–µ–Ω –∏–ª–∏ Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üéâ *Comanda pentru livrare! #{order_data.get('order_id')}* üéâ\n\n"
        f"üë§ *Nume clientului:* {order_data.get('name')}\n"
        f"üìû *Numar mobil* {order_data.get('phone')}\n"
        f"üìç *Adresa livrarii:* {order_data.get('address')}\n\n"
        f"üõí *Comanda este din:*\n"
    )
    total_price = 0
    for item in order_data.get('cart', []):
        item_total = item.get('price', 0) * item.get('quantity', 0)
        total_price += item_total
        message += f"- {item.get('name')} x {item.get('quantity')} = {item_total} MDL\n"
    
    message += f"\nüí∞ *–ò—Ç–æ–≥–æ:* *{total_price} MDL*"
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    params = {"chat_id": CHAT_ID, "text": message, "parse_mode": "Markdown"}

    try:
        response = requests.post(url, data=params)
        if response.status_code == 200:
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_data.get('order_id')} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
        else:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
    except Exception as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

# --- API –≠–ù–î–ü–û–ò–ù–¢–´ ---

# –ì–õ–ê–í–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢: –ü–†–ò–ï–ú –ù–û–í–û–ì–û –ó–ê–ö–ê–ó–ê
@app.route('/api/place_order', methods=['POST'])
def place_order():
    data = request.get_json()
    if not data or not all(k in data for k in ['name', 'phone', 'address', 'cart']):
        return jsonify({'success': False, 'message': '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞'}), 400
    
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        total_price = sum(item['price'] * item['quantity'] for item in data['cart'])

        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        cursor.execute(
            'INSERT INTO orders (customer_name, customer_phone, customer_address, total_price) VALUES (?, ?, ?, ?)',
            (data['name'], data['phone'], data['address'], total_price)
        )
        order_id = cursor.lastrowid # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞

        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        for item in data['cart']:
            cursor.execute(
                'INSERT INTO order_items (order_id, name, quantity, price) VALUES (?, ?, ?, ?)',
                (order_id, item['name'], item['quantity'], item['price'])
            )
        
        conn.commit()
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        order_data_for_telegram = {**data, "order_id": order_id}
        send_telegram_notification(order_data_for_telegram)

        return jsonify({'success': True, 'message': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω'})

    except Exception as e:
        conn.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
        return jsonify({'success': False, 'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500
    finally:
        conn.close()

# –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–û–í –í –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò
@app.route('/admin/check_new_orders')
def check_new_orders():
    last_id = request.args.get('last_id', 0, type=int)
    conn = get_db_connection()
    # –ò—â–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å ID –±–æ–ª—å—à–µ, —á–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    new_orders_cursor = conn.execute('SELECT * FROM orders WHERE id > ? ORDER BY id DESC', (last_id,))
    new_orders = new_orders_cursor.fetchall()

    if not new_orders:
        return jsonify({"new_orders": False})

    # –ï—Å–ª–∏ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–±–∏—Ä–∞–µ–º –¥–ª—è –Ω–∏—Ö HTML
    html_string = ""
    for order in new_orders:
        order_items_cursor = conn.execute('SELECT * FROM order_items WHERE order_id = ?', (order['id'],))
        order_items = order_items_cursor.fetchall()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∑—è—Ç–∞ –∏–∑ admin_dashboard.html)
        items_html = "".join([f"<li>{item['name']} x {item['quantity']}</li>" for item in order_items])
        
        status_buttons_html = ""
        if order['status'] == '–ù–æ–≤—ã–π':
            status_buttons_html = f"""
                <button onclick="updateStatus({order['id']}, '–û–¥–æ–±—Ä–µ–Ω')" class="bg-green-600 hover:bg-green-700 text-white py-1 px-2 rounded text-sm transition-colors" title="–û–¥–æ–±—Ä–∏—Ç—å"><i class="fa-solid fa-check"></i></button>
                <button onclick="updateStatus({order['id']}, '–û—Ç–º–µ–Ω–µ–Ω')" class="bg-red-600 hover:bg-red-700 text-white py-1 px-2 rounded text-sm transition-colors" title="–û—Ç–º–µ–Ω–∏—Ç—å"><i class="fa-solid fa-times"></i></button>
            """
        elif order['status'] == '–û–¥–æ–±—Ä–µ–Ω':
             status_buttons_html = f"""
                <button onclick="updateStatus({order['id']}, '–î–æ—Å—Ç–∞–≤–ª–µ–Ω')" class="bg-blue-600 hover:bg-blue-700 text-white py-1 px-2 rounded text-sm transition-colors" title="–î–æ—Å—Ç–∞–≤–ª–µ–Ω"><i class="fa-solid fa-truck"></i></button>
             """

        html_string += f"""
        <div class="bg-gray-700 p-4 rounded-lg flex flex-col" data-order-id="{order['id']}">
            <div class="flex justify-between items-center border-b border-gray-600 pb-2 mb-3">
                <span class="font-bold text-lg">–ó–∞–∫–∞–∑ #{order['id']}</span>
                <span class="px-2 py-1 text-xs font-bold rounded-full status-{order['status']}">{order['status']}</span>
            </div>
            <div class="flex-grow text-sm text-gray-300 space-y-1">
                <p><strong>–ò–º—è:</strong> {order['customer_name']}</p>
                <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order['customer_phone']}</p>
                <p><strong>–ê–¥—Ä–µ—Å:</strong> {order['customer_address']}</p>
                <div class="mt-2 border-t border-gray-600 pt-2">
                    <p class="font-semibold mb-1">–°–æ—Å—Ç–∞–≤:</p>
                    <ul class="list-disc list-inside text-xs">{items_html}</ul>
                </div>
            </div>
            <p class="mt-3 font-bold text-right text-lg text-yellow-400">–ò—Ç–æ–≥–æ: {order['total_price']} MDL</p>
            <div class="mt-3 flex justify-end space-x-2">
                {status_buttons_html}
                <button onclick="deleteOrder({order['id']})" class="bg-gray-600 hover:bg-red-500 text-white py-1 px-2 rounded text-sm transition-colors" title="–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑">
                    <i class="fa-solid fa-trash"></i>
                </button>
            </div>
        </div>
        """
    conn.close()
    return jsonify({"new_orders": True, "html": html_string})


# --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
if __name__ == '__main__':
    init_db()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    # debug=True –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∫–æ–¥–µ
    app.run(host='0.0.0.0', port=5000, debug=True)